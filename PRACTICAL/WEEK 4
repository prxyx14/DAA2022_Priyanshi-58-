1.

#include<stdio.h>
int arr[100];
void merge(int [],int,int,int);
void merge_sort(int a[],int l,int h)
{
    if(l<h)
    {
        int mid=(l+h)/2;
        merge_sort(a,l,mid);
        merge_sort(a,mid+1,h);
        merge(a,l,mid,h);
    }
}
void merge(int a[],int l,int mid,int h)
{
    int i=l,k=l,j=mid+1;
    while(i<=mid && j<=h)
    {
        if(a[i]<a[j])
        {
            arr[k]=a[i];
            i++;
        }
        else{
            arr[k]=a[j];
            j++;
        }
        k++;
    }
    if(i<=mid)
    {
        arr[k]=a[i];
        i++;
        k++;
    }
    else if(j<=h)
    {
        arr[k]=a[j];
        j++;
        k++;
    }
    for(k=l;k<=h;k++)
    {
        a[k]=arr[k];
    }
}
int main()
{
    int i,n,l=0;
    int a[1000];
    printf("enter the size of array\n");
    scanf("%d",&n);
    printf("enter the elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    merge_sort(a,l,n-1);
    printf("sorted array=\n");
    for(i=0;i<n;i++)
    {
        printf("%d\t",a[i]);
    }
}


2.

#include<stdio.h>
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition(int a[],int l,int h)
{
    int key=a[l];
    int i=l,j=h;
    while(i<j)
    {
        while(a[i]<=key)
        {
            i++;
        }
        while(a[j]>key)
        {
            j--;
        }
        if(i<j)
        {
            swap(&a[i],&a[j]);
        }
    }
    swap(&a[j],&a[l]);
    return j;
}
void quick_sort(int a[],int l,int h)
{
    if(l<=h)
    {
        int pivot=partition(a,l,h);
        quick_sort(a,l,pivot-1);
        quick_sort(a,pivot+1,h);
    }
}
int main()
{
    int a[100],i,n;
    printf("enter the size of array\n");
    scanf("%d",&n);
    printf("enter elements\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    int l=0,h=n-1;
    quick_sort(a,l,h);
    printf("after sorting array=\n");
    for(i=0;i<n;i++)
    {
        printf("%d ",a[i]);
    }
    return 0;
}

