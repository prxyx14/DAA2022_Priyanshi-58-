QUESTION 1:-
#include<bits/stdc++.h>
using namespace std;
void prims(vector<pair<int,int>>adj[],int v)
{
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    int src=0;
    vector<int>key(v,1e6+10);
    vector<int>parent(v,-1);
    vector<bool>vis(v,false);
    pq.push({0,src});
    key[src]=0;
    while(!pq.empty())
    {
        int u=pq.top().second;
        pq.pop();
        if(vis[u])continue;
        vis[u]=true;
        for(auto x:adj[u])
        {
            int v=x.first;
            int weight=x.second;
            if(!vis[v] && key[v]>weight)
            {
                key[v]=weight;
                pq.push({key[v],v});
                parent[v]=u;
            }
        }
    }
    for(int i=1;i<v;i++)
    {
        cout<<parent[i]<<" "<<i<<" "<<key[i]<<endl;
    }
    
}
int main()
{
    int n,e;
    cin>>n>>e;
    vector<pair<int,int>>adj[n];
    for(int i=0;i<e;i++)
    {
        int u,v,wt;
        cin>>u>>v>>wt;
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    prims(adj,n);
}

QUESTION 2:-

#include<bits/stdc++.h>
#include<iostream>
using namespace std;
struct node
{
    int u,v,wt;
    node(int first,int second, int weight)
    {
        u=first;
        v=second;
        wt=weight;
    }
};

bool cmp(node a,node b)
{
    return (a.wt<b.wt);
}

int findpar(int u,vector<int>&parent)
{
    if(u==parent[u])
    {
        return u;
    }
    return findpar(parent[u],parent);
}

void unionoperation(int u,int v,vector<int>&parent,vector<int>&rank)
{
    u=findpar(u,parent);
    v=findpar(v,parent);
    if(rank[u]<rank[v])
    {
        parent[u]=v;
    }
    else if(rank[v]<rank[u])
    {
        parent[v]=u;
    }
    else
    {
        parent[v]=u;
        rank[u]++;
    }
}

int main()
{
    int vertex,ed;
    cin>>vertex>>ed;
    vector <node> edges;
    for(int i=0;i<ed;i++)
    {
        int u,v,wt;
        cin>>u>>v>>wt;
        edges.push_back(node(u,v,wt));
    }
    sort(edges.begin(),edges.end(),cmp);
    vector <int> parent(vertex);
    for(int i=0;i<vertex;i++)
    {
        parent[i]=i;
    }
    vector <int> rank(vertex,0);
    int cost=0;
    vector <pair <int,int>> mst;
    for(auto i:edges)
    {
        if(findpar(i.u,parent)!=findpar(i.v,parent))
        {
            cost+=i.wt;
            mst.push_back(make_pair(i.u,i.v));
            unionoperation(i.u,i.v,parent,rank);
        }
    }
    cout<<"Minimum Spanning Weight: "<<cost<<endl;
    return 0;
}

QUESTION 3:-

#include <bits/stdc++.h>
using namespace std;
 
#define INF INT_MAX


int shortestPath(vector<vector<int>> &graph, int u, int v, int k,int n)
{
   if (k == 0 && u == v)             return 0;
   if (k == 1 && graph[u][v] != INF) return graph[u][v];
   if (k <= 0)                       return INF;
 
   int res = INF;
 
   for (int i = 0; i < n; i++)
   {
       if (graph[u][i] != INF && u != i && v != i)
       {
           int rec_res = shortestPath(graph, i, v, k-1,n);
           if (rec_res != INF)
              res = min(res,graph[u][i] + rec_res);
       }
   }
   return res;
}
 
int main()
{
    int n,m;
    cout<<"enter the number of nodes and edges:"<<endl;
    cin>>n>>m;
    vector<vector<int>> graph(n+1,vector<int> (n+1,INF));
    for (int i=0;i<m;i++)
    {
        int a,b,wt;
        cout<<"enter the node,edge and weight:";
        cin>>a>>b>>wt;
        graph[a][b]=wt;
    }
    for (int i=1;i<=n;i++)
        graph[i][i]=0;
    int u,v,k;
    cout<<"Enter the source, destination and k:"<<endl;
    cin>>u>>v>>k;
    cout << "Weight of the shortest path is "<<
          shortestPath(graph, u, v, k,n);
    return 0;
}
