 QUESTION 1:-
 #include<bits/stdc++.h>
using namespace std;
int main()
{
    int v,e;
    cin>>v>>e;
    int dist[v][v];
   for(int i=1;i<=v;i++)
   {
       for(int j=1;j<=v;j++)
       {
           if(i==j)dist[i][j]=0;
           else dist[i][j]=1e6+10;
       }
   }
    for(int i=0;i<e;i++)
    {
        int u,v,wt;
        cin>>u>>v>>wt;
        dist[u][v]=wt;
    }
    for(int i=1;i<=v;i++)
    {
        for(int j=1;j<=v;j++)
        {
            cout<<dist[i][j]<<" ";
        }
        cout<<endl;
    }
    for(int k=1;k<=v;k++)
    {
        for(int j=1;j<=v;j++)
        {
            for(int i=1;i<=v;i++)
            {
                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }
    for(int i=1;i<=v;i++)
    {
        for(int j=1;j<=v;j++)
        {
            cout<<dist[i][j]<<" ";
        }
        cout<<endl;
    }
}

QUESTION 2:-
#include<bits/stdc++.h>
using namespace std;
struct Item {
    int value, weight;
 
    // Constructor
   
};
 bool cmp(Item a,Item b)
 {
     double r1=(double)a.value/(double)a.weight;
     double r2=(double)b.value/(double)b.weight;
     return r1>r2;
 }
double fractionalknapsack(int w,struct Item arr[],int n)
{
sort(arr,arr+n,cmp);
int currweight=0;
double finalvalue=0.0;
for(int i=0;i<n;i++)
{
  if(currweight+arr[i].weight<=w)
  {
      currweight+=arr[i].weight;
      finalvalue+=arr[i].value;
  }
  else 
  {
      int remain=w-currweight;
      finalvalue+=(arr[i].value /(double(arr[i].weight)))*double(remain);
  }
}
return finalvalue;

}

int main()
{
    int n;
    cin>>n;
    int maxcap;
    cin>>maxcap;
    Item arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i].value;
        cin>>arr[i].weight;
    }
  cout<<fractionalknapsack(maxcap,arr,n);
}

QUESTION 3:-
#include <bits/stdc++.h>

using namespace std;

int main()
{
    int n;
    cin>>n;
    int res[n];
    for(int i=0;i<n;i++)
    {
       cin>>res[i];
    }
    priority_queue<int,vector<int>,greater<int>>pq;
    for(int i=0;i<n;i++)
    {
        pq.push(res[i]);
    }
    int ans=0;
    while(pq.size()>1)
    {
        int a=pq.top();
        pq.pop();
        int b=pq.top();
        pq.pop();
        int temp=a+b;
        ans+=a+b;
        pq.push(temp);
    }
  cout<<"cost = "<<ans;
    return 0;
}
