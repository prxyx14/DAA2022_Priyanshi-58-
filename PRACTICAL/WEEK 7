QUESTION 1:-
#include<bits/stdc++.h>
using namespace std;

void dijkstra(int source,int v, vector<pair<int,int>>adj[])
{
    vector<int>vis(v,0);
    vector<int>dist(v,1e9+10);
  set<pair<int,int>>pq;
   pq.insert({0,source});
  dist[source]=0;
  while(!pq.empty())
   {
    auto node=*pq.begin(); 
    int dis=node.first; cout<<"dis"<<dis<<" "<<endl;
    int n=node.second; cout<<"node"<<n<<endl;
    pq.erase(pq.begin());
    if(vis[n])continue;
    vis[n]=1;
    for(auto child:adj[n])
    {
        int child_n=child.first;
        int wt=child.second;
        if(wt+dist[n]<dist[child_n])
        {
            dist[child_n]=wt+dist[n];
            pq.insert({dist[child_n],child_n});
        }
    }
  }
for(int i=1;i<dist.size();i++)
{
    cout<<"Minimum distance from node "<<"1"<<" is"<<dist[i]<<endl;
}
}
int main()
{
    int v,e;
    cin>>v>>e;
    vector<pair<int,int>>adj[v];
   
    
    for(int i=0;i<e;i++)
    {
        int u,v,wt;
        cin>>u>>v>>wt;
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
     
    }
    cout<<"Enter Source";
    int source;
    cin>>source;
   dijkstra(source,v,adj);


}

QUESTION 2:-
#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

int main(){
    int N,m;
    cin >> N >> m;
    vector<node> edges; 
    for(int i = 0;i<m;i++) {
        int u, v, wt;
        cin >> u >> v >> wt; 
        edges.push_back(node(u, v, wt)); 
    }

    int src;
    cin >> src; 


    int inf = 10000000; 
    vector<int> dist(N, inf); 

    dist[src] = 0; 

    for(int i = 1;i<=N-1;i++) {
        for(auto it: edges) {
            if(dist[it.u] + it.wt < dist[it.v]) {
                dist[it.v] = dist[it.u] + it.wt; 
            }
        }
    }

    int fl = 0; 
    for(auto it: edges) {
        if(dist[it.u] + it.wt < dist[it.v]) {
            cout << "Negative Cycle"; 
            fl = 1; 
            break; 
        }
    }

    if(!fl) {
        for(int i = 0;i<N;i++) {
            cout << src << " : " <<i<<" ->" <<dist[i] << endl;
        }
    }


    return 0;
}

QUESTION 3:-

#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

bool comp(node a, node b) {
    return a.wt > b.wt; 
}

int findPar(int u, vector<int> &parent) {
    if(u== parent[u]) 
	   return u; 
    return parent[u] = findPar(parent[u], parent); 
}

void unionn(int u, int v, vector<int> &parent, vector<int> &rank) {
    u = findPar(u, parent);
    v = findPar(v, parent);
    if(rank[u] < rank[v]) {
    	parent[u] = v;
    }
    else if(rank[v] < rank[u]) {
    	parent[v] = u; 
    }
    else {
    	parent[v] = u;
    	rank[u]++; 
    }
}
int main(){
	int N,m;
	cin>>N>>m;
	vector<pair<int,int>> adj[N];   //undirected graph
	cout<<"enter the edge and its weight"<<endl;
	for (int i=0;i<m;i++)
	{
		int a,b,wt;
		cin>>a>>b>>wt;
		adj[a].push_back({b,wt});    //pushing only one edge because we only need one edge to sort rather it became duplicates while sorting later
	}
	vector<node> edges; 
	
	//converting adjacency list to the easy edge structure
    for (int i=0;i<N;i++)
	{
		for (auto it:adj[i])
		{
			edges.push_back(node(i,it.first,it.second));
		}
	}
	sort(edges.begin(), edges.end(), comp); 
	
	vector<int> parent(N);
	for(int i = 0;i<N;i++) 
	    parent[i] = i; 
	vector<int> rank(N, 0); 
	
	int cost = 0;
	vector<pair<int,int>> mst; 

	for(auto it : edges) {
	    if(findPar(it.v, parent) != findPar(it.u, parent))
        {
	        cost += it.wt; 
	        mst.push_back({it.u, it.v}); 
	        unionn(it.u, it.v, parent, rank); 
	    }
	}

	cout << cost << endl;
	for(auto it : mst) cout << it.first << " - " << it.second << endl;
}
