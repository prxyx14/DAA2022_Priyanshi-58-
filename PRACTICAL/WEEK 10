QUESTION 1:-

#include <bits/stdc++.h>

using namespace std;
#define MAX 6
struct Activity{
    int start;
    int finish;
    Activity()
    {
        start=0;
        finish=0;
    }
};
bool cmp(Activity a1,Activity a2)
{
    return a1.finish<a2.finish;
}
void ActivitySelection(Activity arr[],int n)
{
    sort(arr,arr+n,cmp);
    vector<pair<int,int>>v;
    int i=0,prev=0,count=1;
    v.push_back({arr[i].start,arr[i].finish});
    for(int j=1;j<n;j++)
    {
        if(arr[j].start>=arr[prev].finish)
        {
            // cout<<arr[j].start<<" "<<arr[j].finish<<endl;
            v.push_back({arr[j].start,arr[j].finish});
            count++;
            prev=j;
        }
    }
    cout<<"No. of non conflicting activities: "<<count<<endl;
    cout<<"list of non conflicting activities: ";
    for(auto &it:v)
    {
        cout<<it.first<<" "<<it.second<<endl;
    }
}
int main()
{
    struct Activity ac[MAX];
    for(int i=0;i<MAX;i++)
    {
        cin>>ac[i].start;
        cin>>ac[i].finish;
    }
  ActivitySelection(ac,MAX);
    return 0;
}

QUESTION 2:-
#include <bits/stdc++.h>
using namespace std;
#define MAX 7
struct job{
    int timetaken;
    int deadline;
    int index;
};
bool cmp(job a1,job a2)
{
    return a1.deadline<a2.deadline;
}
void jobScheduling(job arr[])
{
    sort(arr,arr+MAX,cmp);
    int dead=0;
    vector<int>t;
   for(int i=0;i<MAX;i++)
    {
        int ded=arr[i].timetaken;
        if(ded+dead<=arr[i].deadline)
        {
            dead+=ded;
            t.push_back(arr[i].index);
        }
    }
     cout<<"Max number of tasks: "<<t.size()<<endl;
    cout<<"Selected tasks numbers: ";
    for(auto i: t){
        cout<<i<<" ";
    }
    
}
int main()
{
   struct job j[MAX];
   for(int i=0;i<MAX;i++)
   {
       cin>>j[i].timetaken;
       cin>>j[i].deadline;
       j[i].index=i+1;
   }
   jobScheduling(j);
}

QUESTION 3:-
#include <iostream>

using namespace std;
double findmedian(int arr[],int n)
{
    double ans;
    if(n%2==0)
    {
      ans=double(arr[n/2]);
    }
    else{
        ans= (double)(arr[(n-1)/2] + arr[n/2])/2.0;
    }
    return ans;
}
int main()
{
   int n;
   cin>>n;
   int arr[n];
   for(int i=0;i<n;i++)cin>>arr[i];
   int res=arr[0],count=1;
   for(int i=1;i<n;i++)
   {
       if(arr[i]==res)count++;
       else{
            count--;
           if(count==0)
           {
               res=arr[i];
               count=1;
           }
          
       }
   }
  count=0;
  for(int i=0;i<n;i++)
  {
      if(arr[i]==res)count++;
  }
  if(count>n/2)cout<<"yes"<<endl;
  else cout<<"No"<<endl;
 cout<<"Median ="<< findmedian(arr,n);
    return 0;
}
